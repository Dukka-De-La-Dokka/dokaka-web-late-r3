{"version":3,"file":"component---src-templates-posts-js-bb16a072345a96ceaa33.js","mappings":"qPAkFA,UAxEc,SAAC,GAA2B,IAIpCA,EACAC,EALWC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACfC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAA8BJ,EAA9BI,gBAAiBC,EAAaL,EAAbK,SACnBC,EAAkC,IAApBF,EAIpB,IACEP,EAAeI,EAAM,GAAGM,KACxB,MAAOC,GACPX,EAAe,KAEjB,IACEC,EAAUG,EAAM,GAAGM,KAAKE,UAAUC,gBAAgBC,OAAOC,SAASC,IAClE,MAAOL,GACPV,EAAU,KAGZ,OACE,QAAC,IAAD,MACE,QAAC,IAAD,CAAKgB,MAAO,IAAUT,GAAWU,MAAOjB,KACxC,QAAC,IAAD,KACGQ,GACC,QAAC,IAAD,MACE,QAAC,KAAD,UAAUT,EAAV,CAAwBmB,UAAQ,EAACX,SAAUA,KAC1CJ,EAAMgB,MAAM,GAAGC,KAAI,gBAASC,EAAT,EAAGZ,KAAH,OAClB,QAAC,KAAD,QAAMa,IAAKD,EAAKE,IAAQF,EAAxB,CAA8Bd,SAAUA,UAI5C,QAAC,IAAD,KACGJ,EAAMiB,KAAI,gBAASC,EAAT,EAAGZ,KAAH,OACT,QAAC,KAAD,QAAMa,IAAKD,EAAKE,IAAQF,EAAxB,CAA8Bd,SAAUA,WAKhD,QAAC,IAAD,CAAYiB,QAAStB","sources":["webpack://gatsby-starter-gcn/./src/templates/posts.js"],"sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport CardList from '../components/CardList'\nimport Card from '../components/Card'\nimport Container from '../components/Container'\nimport Pagination from '../components/Pagination'\nimport SEO from '../components/SEO'\nimport { startCase } from 'lodash'\n\nconst Posts = ({ data, pageContext }) => {\n  const posts = data.allContentfulPost.edges\n  const { humanPageNumber, basePath } = pageContext\n  const isFirstPage = humanPageNumber === 1\n  let featuredPost\n  let ogImage\n\n  try {\n    featuredPost = posts[0].node\n  } catch (error) {\n    featuredPost = null\n  }\n  try {\n    ogImage = posts[0].node.heroImage.gatsbyImageData.images.fallback.src\n  } catch (error) {\n    ogImage = null\n  }\n\n  return (\n    <Layout>\n      <SEO title={startCase(basePath)} image={ogImage} />\n      <Container>\n        {isFirstPage ? (\n          <CardList>\n            <Card {...featuredPost} featured basePath={basePath} />\n            {posts.slice(1).map(({ node: post }) => (\n              <Card key={post.id} {...post} basePath={basePath} />\n            ))}\n          </CardList>\n        ) : (\n          <CardList>\n            {posts.map(({ node: post }) => (\n              <Card key={post.id} {...post} basePath={basePath} />\n            ))}\n          </CardList>\n        )}\n      </Container>\n      <Pagination context={pageContext} />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($skip: Int!, $limit: Int!) {\n    allContentfulPost(\n      sort: { fields: [publishDate], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          title\n          id\n          slug\n          publishDate(formatString: \"MMMM DD, YYYY\")\n          heroImage {\n            title\n            gatsbyImageData(width: 1800, placeholder: BLURRED)\n          }\n          body {\n            childMarkdownRemark {\n              timeToRead\n              html\n              excerpt(pruneLength: 80)\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Posts\n"],"names":["featuredPost","ogImage","data","pageContext","posts","allContentfulPost","edges","humanPageNumber","basePath","isFirstPage","node","error","heroImage","gatsbyImageData","images","fallback","src","title","image","featured","slice","map","post","key","id","context"],"sourceRoot":""}